
#####################################################################
#   Macros
#####################################################################

[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}

[gcode_macro WIPE_LINE]
gcode:
  {% set z = params.Z|default(0.28)|float %}
  {% set n = params.N|default(0.4)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=WIPE_LINE_state

    G1 X60 Y0 Z2 F3000.0
    G1 Z{z} F240
    G92 E0.0
    G1 E8.0 ; Purge Bubble
    G1 X50 E14.0 F1500.0
#   G1 X89 E25.0 F1500.0;  draw line
    G92 E0.0
    RESTORE_GCODE_STATE NAME=WIPE_LINE_state MOVE=0
  {% endif %}

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        status_homing
        G28
    {% endif %}

[gcode_macro G32]
gcode:
    status_homing
    G28    
    ##  Uncomment for 300 build
    G0 X60 Y60 Z10 F3600
    
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set bedtemp = params.BED|int %}
    {% set hotend_start = params.HOTEND |int %}
    {% set hotendtemp = (hotend_start - 70) | int %}
    status_printing
    
    # {% set chambertemp = params.CHAMBER|default(0)|int %}
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}
    CG28
    status_heating
    M190 S{bedtemp}
    M109 S{hotendtemp}
    # G1 X2 Y2 Z5 F3000
    SMART_PARK
    {% set hotendtemp = params.HOTEND|int %}
    M109 S{hotendtemp} # Wait for hot end temp 
    VORON_PURGE
    status_white
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    status_off

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200


[gcode_macro PREP_PRINT]
description: heats bed, homes and levels gantry
gcode:
     {% set BED = params.BED | default(110) | float %}
     {% set NOZZLE = params.NOZZLE | default (180) | float %}
     G32
     #BED_MESH_CALIBRATE
     CENTER
     M104 S{NOZZLE}
     M109 S{NOZZLE}
     G92 E0.0
     status_ready


[gcode_macro HEAT_SOAK]
description: heats the bed and nozzle for a while 

variable_target_temp: 0
variable_nozzle_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
variable_nozzle_stage: None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    status_printing
    {% set BED = params.BED | default(110) | float %}
    {% set DURATION = (params.DURATION | default(30) | int) * 60 %} ## minutes to seconds
# Added a variable for nozzle - VA
    {% set NOZZLE = params.NOZZLE | default (150) | float %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ BED }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
# Added notes on nozzle
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_temp         VALUE={ NOZZLE }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_stage           VALUE="'heating'"

    ;; fire up the heaters
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ BED }
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={ NOZZLE }


    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    CG28
    G1 X60 Y60 Z10

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    status_off
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            PREP_PRINT NOZZLE=nozzle_temp
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_temp         VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

# [gcode_macro LOAD_FILAMENT]
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     G91
#     G92 E0
#     M83                            ; set extruder to relative
#     G1 E30 F{speed}                ; load
#     G1 E15 F150     ; prime nozzle with filament
#     M82                            ; set extruder to absolute

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

# [gcode_macro UNLOAD_FILAMENT]
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     M83                            ; set extruder to relative
#     G1 E10 F{speed}       ; extrude a little to soften tip
#     G1 E-40 F{max_velocity}        ; retract some, but not too much or it will jam
#     M82                            ; set extruder to absolute

[gcode_macro ZUP_P01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN_P01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro ZUP_P02]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.02 MOVE=1

[gcode_macro ZDOWN_P02]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.02 MOVE=1

[gcode_macro ZUP_P03]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.03 MOVE=1

[gcode_macro ZDOWN_P03]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.03 MOVE=1

[gcode_macro ZUP_P04]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.04 MOVE=1

[gcode_macro ZDOWN_P04]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.04 MOVE=1

[gcode_macro ZUP_P05]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1

[gcode_macro ZDOWN_P05]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1

[gcode_macro ZDOWN_P1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.1 MOVE=1

[gcode_macro ZDOWN_P5]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.5 MOVE=1

[gcode_macro ZUP_P1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.1 MOVE=1

[gcode_macro ZUP_P5]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.5 MOVE=1

[gcode_macro ZUP_1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=1.0 MOVE=1

[gcode_macro ZDOWN_1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-1.0 MOVE=1

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                                                       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:       
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro SHUTDOWN]
gcode:
    status_off
    #LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    #OFF                                              ; Shortcut to turn everything off (see above for this macro)
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28                               ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro CONTINUE_FROM_HEAT_SOAK]
description: Forces in-progress HEAT_SOAK cycle to done stage
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'done'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

